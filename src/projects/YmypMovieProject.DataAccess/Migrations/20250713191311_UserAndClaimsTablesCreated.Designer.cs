// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YmypMovieProject.DataAccess.Contexts;

#nullable disable

namespace YmypMovieProject.DataAccess.Migrations
{
    [DbContext(typeof(MovieDbContext))]
    [Migration("20250713191311_UserAndClaimsTablesCreated")]
    partial class UserAndClaimsTablesCreated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<Guid>("ActorsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");
                });

            modelBuilder.Entity("Core.Entity.Concrete.OperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Claims");
                });

            modelBuilder.Entity("Core.Entity.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FirstName")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LastName")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entity.Concrete.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("OperationClaimId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9cd54e24-2690-40d6-9e03-9607881a1c7c"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 398, DateTimeKind.Utc).AddTicks(9631),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Aksiyon"
                        },
                        new
                        {
                            Id = new Guid("1f2f843f-9f90-4578-8a73-39adcdd1706c"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 398, DateTimeKind.Utc).AddTicks(9646),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Bilim Kurgu"
                        },
                        new
                        {
                            Id = new Guid("e1394197-c0c6-40a6-bed0-a8147195c665"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 398, DateTimeKind.Utc).AddTicks(9651),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Komedi"
                        },
                        new
                        {
                            Id = new Guid("ad25b17f-2c54-4629-985a-ffca90d2fcaf"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 398, DateTimeKind.Utc).AddTicks(9654),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Belgesel"
                        },
                        new
                        {
                            Id = new Guid("8627b99e-2353-4bea-9a65-538789a67339"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 398, DateTimeKind.Utc).AddTicks(9658),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Fantastik"
                        },
                        new
                        {
                            Id = new Guid("e221768e-6e0f-413c-bdcf-0de3be90ebbb"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 398, DateTimeKind.Utc).AddTicks(9667),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Korku"
                        });
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Director", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3401950-fc04-481f-9be8-28043b9b762c"),
                            BirthDate = new DateTime(1970, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(203),
                            Description = "British-American film director, producer, and screenwriter.",
                            FirstName = "Christopher",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Nolan"
                        },
                        new
                        {
                            Id = new Guid("bf0848f0-c881-45a5-94a9-42deffb774a2"),
                            BirthDate = new DateTime(1946, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(212),
                            Description = "American film director, producer, and screenwriter.",
                            FirstName = "Steven",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Spielberg"
                        },
                        new
                        {
                            Id = new Guid("383ff54f-8e28-4353-a06a-94e269d3ad7a"),
                            BirthDate = new DateTime(1942, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(215),
                            Description = "American film director, producer, screenwriter, and actor.",
                            FirstName = "Martin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Scorsese"
                        },
                        new
                        {
                            Id = new Guid("e6494cdf-0e44-49eb-9309-8082c28f9f41"),
                            BirthDate = new DateTime(1963, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(225),
                            Description = "American filmmaker, actor, and screenwriter.",
                            FirstName = "Quentin",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Tarantino"
                        },
                        new
                        {
                            Id = new Guid("64ad0a6f-7a78-4ed5-ba13-596a6987ba37"),
                            BirthDate = new DateTime(1954, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(231),
                            Description = "Canadian filmmaker and environmental advocate.",
                            FirstName = "James",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Cameron"
                        });
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("DirectorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("IMDB")
                        .HasPrecision(4, 2)
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DirectorId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa07b5c7-1af8-4f4c-96fa-6910c6eb8eb7"),
                            CategoryId = new Guid("9cd54e24-2690-40d6-9e03-9607881a1c7c"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(281),
                            Description = "A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a CEO.",
                            DirectorId = new Guid("b3401950-fc04-481f-9be8-28043b9b762c"),
                            IMDB = 8.8m,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Inception",
                            PublishDate = new DateTime(2010, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9aae3cef-f2da-464e-8e75-0de14517e42d"),
                            CategoryId = new Guid("9cd54e24-2690-40d6-9e03-9607881a1c7c"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(290),
                            Description = "Interstellar movie Nolan..",
                            DirectorId = new Guid("b3401950-fc04-481f-9be8-28043b9b762c"),
                            IMDB = 8.7m,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Interstellar",
                            PublishDate = new DateTime(1999, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("0efb7e37-439e-4d8f-bf2e-46951bd18255"),
                            CategoryId = new Guid("9cd54e24-2690-40d6-9e03-9607881a1c7c"),
                            CreateAt = new DateTime(2025, 7, 13, 19, 13, 9, 399, DateTimeKind.Utc).AddTicks(363),
                            Description = "When the menace known as the Joker emerges from his mysterious past, he wreaks havoc and chaos on the people of Gotham.",
                            DirectorId = new Guid("b3401950-fc04-481f-9be8-28043b9b762c"),
                            IMDB = 9.0m,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "The Dark Knight",
                            PublishDate = new DateTime(2008, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("YmypMovieProject.Entity.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YmypMovieProject.Entity.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Movie", b =>
                {
                    b.HasOne("YmypMovieProject.Entity.Entities.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YmypMovieProject.Entity.Entities.Director", "Director")
                        .WithMany("Movies")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Director");
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("YmypMovieProject.Entity.Entities.Director", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
